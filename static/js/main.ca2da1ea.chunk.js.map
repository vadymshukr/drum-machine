{"version":3,"sources":["components/DrumPad/DrumPad.js","components/Display/Display.js","components/DrumMachine/DrumMachine.js","components/App/App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","handleKeyPress","bind","playSound","document","addEventListener","this","removeEventListener","e","key","value","toUpperCase","displayUpdate","id","sound","getElementById","currentTime","play","$","addClass","setTimeout","removeClass","className","onClick","src","React","Component","Display","displayData","sounds","DrumMachine","state","displayContent","data","setState","keyCode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4XAsDeA,E,YAjDb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAEDC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAJD,E,iFAQhBE,SAASC,iBAAiB,UAAWC,KAAKL,kB,6CAG1CG,SAASG,oBAAoB,UAAWD,KAAKL,kB,qCAGhCO,GACb,IAAMC,EAAMH,KAAKN,MAAMU,MACnBF,EAAEC,IAAIE,gBAAkBF,IAC1BH,KAAKH,YACFK,GACDF,KAAKN,MAAMY,cAAcN,KAAKN,MAAMa,O,gCAMhCL,GACR,IAAMM,EAAQV,SAASW,eAAeT,KAAKN,MAAMU,OAEjDI,EAAME,YAAc,EACpBF,EAAMG,OACHT,GACDF,KAAKN,MAAMY,cAAcN,KAAKN,MAAMa,IAGtCK,IAAGZ,MAAOa,SAAS,UACjBC,YAAW,WACTF,IAAE,aAAaG,YAAY,YAC1B,O,+BAGL,OACI,yBAAKR,GAAIP,KAAKN,MAAMa,GAAIS,UAAU,WAAWC,QAASjB,KAAKH,WACvD,2BAAIG,KAAKN,MAAMU,OACf,2BAAOc,IAAKlB,KAAKN,MAAMc,MAAOQ,UAAU,OAAOT,GAAIP,KAAKN,MAAMU,a,GA5CpDe,IAAMC,WCYbC,G,kBAZb,WAAY3B,GAAO,qEACXA,I,sEAGN,OACE,yBAAKa,GAAG,UAAUS,UAAU,kBACtB,2BAAIhB,KAAKN,MAAM4B,kB,GAPLH,IAAMC,YCGtBG,EACO,yDADPA,EAEG,6DAFHA,EAGE,6DAHFA,EAIS,yDAJTA,EAKG,yDALHA,EAMG,+DANHA,EAOG,0DAPHA,EAQI,yDARJA,EASK,kEA+CIC,E,YA3Cb,WAAY9B,GAAO,IAAD,8BAChB,4CAAMA,KACD+B,MAAQ,CACXC,eAAgB,IAElB,EAAKpB,cAAgB,EAAKA,cAAcV,KAAnB,gBALL,E,2EAQJ+B,GACZ3B,KAAK4B,SAAS,CACZF,eAAgBC,M,+BAKlB,OACE,yBAAKpB,GAAG,eAAeS,UAAU,wBAC/B,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAASM,YAAatB,KAAKyB,MAAMC,kBAGnC,yBAAKV,UAAU,OACb,kBAAC,EAAD,CAASZ,MAAM,IAAIG,GAAG,QAAQsB,QAAU,KAAKrB,MAAOe,EAAkBjB,cAAeN,KAAKM,gBAC1F,kBAAC,EAAD,CAASF,MAAM,IAAIG,GAAG,UAAUsB,QAAU,KAAKrB,MAAOe,EAAoBjB,cAAeN,KAAKM,gBAC9F,kBAAC,EAAD,CAASF,MAAM,IAAIG,GAAG,QAAQsB,QAAU,KAAKrB,MAAOe,EAAcjB,cAAeN,KAAKM,iBAExF,yBAAKU,UAAU,OACb,kBAAC,EAAD,CAASZ,MAAM,IAAIG,GAAG,QAAQsB,QAAU,KAAKrB,MAAOe,EAAcjB,cAAeN,KAAKM,gBACtF,kBAAC,EAAD,CAASF,MAAM,IAAIG,GAAG,SAASsB,QAAU,KAAKrB,MAAOe,EAAejB,cAAeN,KAAKM,gBACxF,kBAAC,EAAD,CAASF,MAAM,IAAIG,GAAG,UAAUsB,QAAU,KAAKrB,MAAOe,EAAgBjB,cAAeN,KAAKM,iBAE5F,yBAAKU,UAAU,OACb,kBAAC,EAAD,CAASZ,MAAM,IAAIG,GAAG,OAAOsB,QAAU,KAAKrB,MAAOe,EAAajB,cAAeN,KAAKM,gBACpF,kBAAC,EAAD,CAASF,MAAM,IAAIG,GAAG,UAAUsB,QAAU,KAAKrB,MAAOe,EAAcjB,cAAeN,KAAKM,gBACxF,kBAAC,EAAD,CAASF,MAAM,IAAIG,GAAG,QAAQsB,QAAU,KAAKrB,MAAOe,EAAcjB,cAAeN,KAAKM,sB,GAnCtEa,IAAMC,WCDjBU,E,YAZb,WAAYpC,GAAO,qEACXA,I,sEAGN,OACE,6BACE,kBAAC,EAAD,W,GAPUyB,IAAMC,WCQJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASW,eAAe,SD6H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ca2da1ea.chunk.js","sourcesContent":["import React from 'react';\nimport './DrumPad.css';\nimport $ from 'jquery';\n\nclass DrumPad extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.playSound = this.playSound.bind(this);\n  }\n\n  componentDidMount(){\n    document.addEventListener('keydown', this.handleKeyPress)\n  }\n  componentWillUnmount(){\n    document.removeEventListener('keydown', this.handleKeyPress)\n  }\n\n  handleKeyPress(e){\n    const key = this.props.value;\n    if (e.key.toUpperCase() === key){\n      this.playSound();\n      if(e){\n        this.props.displayUpdate(this.props.id);\n      }\n    }\n  }\n\n\n  playSound(e){\n    const sound = document.getElementById(this.props.value);\n\n    sound.currentTime = 0;\n    sound.play();\n    if(e){\n      this.props.displayUpdate(this.props.id);\n    }\n    \n    $( this ).addClass('active');\n      setTimeout(function(){\n        $('.drum-pad').removeClass('active');\n      }, 500);\n  }\n  render(){\n    return (\n        <div id={this.props.id} className=\"drum-pad\" onClick={this.playSound}>\n            <p>{this.props.value}</p>\n            <audio src={this.props.sound} className=\"clip\" id={this.props.value}></audio>\n        </div>\n    )\n  }\n}\n\nexport default DrumPad;\n","import React from 'react';\nimport './Display.css';\n\nclass Display extends React.Component{\n  constructor(props){\n    super(props);\n  }\n  render(){\n    return (\n      <div id=\"display\" className=\"displaySection\"> \n            <p>{this.props.displayData}</p>\n      </div>\n    )\n  }\n}\n\nexport default Display;\n","import React from 'react';\nimport './DrumMachine.css';\nimport DrumPad from '../DrumPad/DrumPad';\nimport Display from '../Display/Display';\nimport $ from 'jquery';\n\nconst sounds = {\n  openhihat: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\n  kick2: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n  kick: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\n  closedhihat: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\n  snare: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\n  stick: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3',\n  crash: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3',\n  cymbal: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3',\n  cowbell: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}\n\nclass DrumMachine extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      displayContent: ''\n    }\n    this.displayUpdate = this.displayUpdate.bind(this);\n  }\n\n  displayUpdate(data){\n    this.setState({\n      displayContent: data\n    })\n  }\n  \n  render(){\n    return (\n      <div id=\"drum-machine\" className=\"drum-machine-section\"> \n        <div className=\"row\">\n          <Display displayData={this.state.displayContent}/>\n        </div>\n        \n        <div className=\"row\">\n          <DrumPad value='Q' id=\"HiHat\" keyCode = \"81\" sound={sounds.openhihat} displayUpdate={this.displayUpdate}/>\n          <DrumPad value='W' id=\"ClHiHat\" keyCode = \"87\" sound={sounds.closedhihat} displayUpdate={this.displayUpdate}/>\n          <DrumPad value='E' id=\"Crash\" keyCode = \"69\" sound={sounds.crash} displayUpdate={this.displayUpdate}/>  \n        </div>\n        <div className=\"row\">\n          <DrumPad value='A' id=\"Click\" keyCode = \"65\" sound={sounds.stick} displayUpdate={this.displayUpdate}/>\n          <DrumPad value='S' id=\"Cymbal\" keyCode = \"83\" sound={sounds.cymbal} displayUpdate={this.displayUpdate}/>\n          <DrumPad value='D' id=\"CowBell\" keyCode = \"68\" sound={sounds.cowbell} displayUpdate={this.displayUpdate}/>\n        </div>\n        <div className=\"row\">\n          <DrumPad value='Z' id=\"Kick\" keyCode = \"90\" sound={sounds.kick} displayUpdate={this.displayUpdate}/>\n          <DrumPad value='X' id=\"LowKick\" keyCode = \"88\" sound={sounds.kick2} displayUpdate={this.displayUpdate}/>\n          <DrumPad value='C' id=\"Snare\" keyCode = \"67\" sound={sounds.snare} displayUpdate={this.displayUpdate}/>\n        </div>\n        \n        \n      </div>\n    )\n  }\n}\n\nexport default DrumMachine;\n","import React from 'react';\nimport './App.css';\nimport DrumMachine from '../DrumMachine/DrumMachine';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n  }\n  render(){\n    return (\n      <div>\n        <DrumMachine />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}